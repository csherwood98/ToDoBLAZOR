@inject ISqlDataAccess _db

<div>
    <EditForm Model="@editTask" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Description">Task Description</label>
            <InputTextArea class="form-control " id="Description" rows="3" maxlength="300" placeholder="Required Field. Maximum 300 characters." required @bind-Value="editTask.Description"></InputTextArea>
        </div>
        <div class="form-group">
            <label for="Priority">Priority</label>
            <InputSelect class="form-control" id="Priority" @bind-Value="editTask.Priority">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="DueDate">Due Date</label>
            <InputDate id="DueDate" @bind-Value="editTask.DueDate" />
        </div>

        <div class="form-group">
            <label for="Subtasks">Subtasks</label>
            @if (editTask.Subtasks is not null)
            {
                foreach (SubtaskModel st in editTask.Subtasks)
                {
                <p>@st.Description</p>
                //TODO: Find a better way to handle this to allow distinct Subtasks that have the same description
                <button type="button" class="btn-danger" @onclick="e=>OnDeleteSubtask(st.Description)">rmv</button>
                }
            }
            <textarea id="Subtasks" @bind="newSubtask" rows="2" placeholder="Maximum 300 characters." maxlength="300"></textarea>
            <button type="button" @onclick="AddSubtask">Add Subtask</button>
        </div>
        <div class="form-group">
            <label for="Tags">Tags</label>
            @if (editTask.Tags is not null)
            {
                foreach (var tag in editTask.Tags)
                {
                    <button type="button" class="btn-danger" @onclick="e=>OnDeleteTag(tag.Name)">rmv</button>
                    <p>@tag.Name</p>
                    

                }
}
            <input type="text" id="Tags" @bind="newTag" maxlength="100" placeholder="Maximum 100 characters." />
            <button type="button" @onclick="AddTag">Add Tag</button>

        </div>

        <button type="submit" class="btn btn-primary">Edit</button>
        <button @onclick="Cancel" class="btn btn-danger">Cancel</button>
    </EditForm>
</div>


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public int TaskId { get; set; }
    [Parameter] public List<TaskModel> TasksList { get; set; }

    TaskModel editTask { get; set; }


    private void OnDeleteTag(string deleteName)
    {
        editTask.Tags.RemoveAll(x => x.Name == deleteName);
    }

    private void OnDeleteSubtask(string deleteDescription)
    {
        editTask.Subtasks.RemoveAll(x => x.Description == deleteDescription);
    }

    private string newSubtask;
    private void AddSubtask()
    {
        if (editTask.Subtasks is null)
        {
            editTask.Subtasks = new List<SubtaskModel>();
        }
        if (!String.IsNullOrWhiteSpace(newSubtask))
        {
            editTask.Subtasks.Add(new SubtaskModel() { Description = newSubtask });
            newSubtask = string.Empty;
        }
    }

    private string newTag;
    private void AddTag()
    {
        if (editTask.Tags is null)
        {
            editTask.Tags = new List<TagModel>();
        }
        //TODO: Better validation
        if (!String.IsNullOrWhiteSpace(newTag) && editTask.Tags.FindIndex(x => x.Name == newTag) == -1)
        {
            editTask.Tags.Add(new TagModel() { Name = newTag });
            newTag = string.Empty;
        }
        else
        {
            newTag = "invalid entry.";
        }
    }

    protected override void OnInitialized()
    {
        editTask = TasksList.Find(x => x.Id == TaskId);
    }

    private void HandleValidSubmit()
    {
        _db.UpdateTask(editTask);

        BlazoredModal.CloseAsync(ModalResult.Ok(editTask));
    }

    async Task Cancel() => await BlazoredModal.CancelAsync();

}
