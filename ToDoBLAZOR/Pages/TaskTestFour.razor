@page "/TaskTestFour"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject ISqlDataAccess _db

<h3>TaskTestFour: Modal Add</h3>

<button @onclick="AddModal" class="btn btn-primary">Add Task</button>


<table class="table table-striped">
    <thead>
        <tr>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Subtasks</th>
            <th>Tags</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in tasks)
            {
            <tr>
                <td>@t.Description</td>
                <td>@t.Priority</td>
                <td>@t.DueDate.ToString("yyyy/MM/dd")</td>
                <td>
                    @if (t.Subtasks.Count == 0)
                    {
                        <ul>There are no subtasks</ul>
                    }
                    else
                    {
                        foreach (var s in t.Subtasks)
                        {
                            <ul>@s.Description</ul>
                        }
                    }
                </td>
                <td>
                    @if (t.Tags.Count == 0)
                    {
                        <ul>There are no tags</ul>
                    }
                    else
                    {
                        foreach (var tag in t.Tags)
                        {
                            <ul>@tag.Name</ul>
                        }
                    }
                </td>
                <td>
                    <button class="btn-danger" @onclick="e=> OnDelete(t.Id)">Delete</button>
                </td>
            </tr>
            }
    </tbody>
</table>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }


    async Task AddModal()
    {
        var formModal = Modal.Show<AddTask>("Add Model");
        var result = await formModal.Result;
        if (!result.Cancelled && result is not null)
        {
            tasks.Add((TaskModel)result.Data);
        }
    }

    private void OnDelete(int Id)
    {
        _db.DeleteTask(Id);
        tasks.RemoveAll(x => x.Id == Id);
    }

    private List<TaskModel> tasks;

    protected override void OnInitialized()
    {
        tasks = _db.Tasks_GetAll();
    }
}
