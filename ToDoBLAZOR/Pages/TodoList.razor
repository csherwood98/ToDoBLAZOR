@page "/TodoList"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject ISqlDataAccess _db

<h3>Todo List</h3>

<button @onclick="AddModal" class="btn btn-primary">Add Task</button>


<table class="table table-striped">
    <thead>
        <tr>
            <th>Description</th>
            <th>Priority</th>
            <th>Due Date</th>
            <th>Subtasks</th>
            <th>Tags</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in tasks)
        {
            if (!t.CompletionFlag)
            {
                <tr>
                    <td>
                        <input type="checkbox" @onchange="e=> UpdateTaskCompletion(t, e.Value)" />
                        @t.Description
                    </td>
                    <td>@t.Priority</td>
                    <td>@t.DueDate.ToString("yyyy/MM/dd")</td>
                    <td>
                        @if (t.Subtasks is null || t.Subtasks.Count == 0)
                        {
                            <ul>There are no subtasks</ul>
                        }
                        else
                        {
                            foreach (var s in t.Subtasks)
                            {
                                if (!s.CompletionFlag)
                                {
                                    //TODO: Currently issue exists where if non-last is checked, it is removed properly but new list has the one in its former position automatically checked
                                    <ul>
                                        <li>
                                            <input type="checkbox" @onchange="e=> UpdateSubtaskCompletion(t, s, e.Value)" />
                                            @s.Description
                                        </li>

                                    </ul>
                                }
                            }
                        }
                    </td>
                    <td>
                        @if (t.Tags is null || t.Tags.Count == 0)
                        {
                            <ul>There are no tags</ul>
                        }
                        else
                        {
                            foreach (var tag in t.Tags)
                            {
                                <ul>@tag.Name</ul>
                            }
                        }
                    </td>
                    <td>
                        <div class="btn-group">
                            <button class="btn-danger" @onclick="e=> OnDelete(t.Id)">Delete</button>
                            <button class="btn-secondary" @onclick="e=> ShowEditTask(t.Id, tasks)">Edit</button>
                        </div>

                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    async Task AddModal()
    {
        var formModal = Modal.Show<AddTask>("Add Model");
        var result = await formModal.Result;
        if (!result.Cancelled && result is not null)
        {
            tasks.Add((TaskModel)result.Data);
        }
    }

    private void UpdateTaskCompletion(TaskModel t, object checkedValue)
    {
        t.CompletionFlag = (bool)checkedValue;
        //This check is here because of the checkmark bug, can be removed if bug fixed
        if ((bool)checkedValue)
        {
            t.DateCompleted = DateTime.Now;
        }

        _db.UpdateTaskCompletion(t);
        //tasks.RemoveAll(x => x.CompletionFlag);
    }

    private void UpdateSubtaskCompletion(TaskModel t, SubtaskModel s, object checkedValue)
    {
        t.Subtasks[t.Subtasks.FindIndex(x => x == s)].CompletionFlag = (bool)checkedValue;
        _db.UpdateSubtaskCompletion(s);
        //t.Subtasks.RemoveAll(x => x.CompletionFlag);
    }

    private void OnDelete(int Id)
    {
        _db.DeleteTask(Id);
        tasks.RemoveAll(x => x.Id == Id);
    }

    async Task ShowEditTask(int Id, List<TaskModel> tasks)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditTask.TaskId), Id);
        parameters.Add(nameof(EditTask.TasksList), tasks);

        var formModal = Modal.Show<EditTask>("Edit Task", parameters);
        var result = await formModal.Result;
        if (!result.Cancelled && result is not null)
        {
            TaskModel edited = (TaskModel)result.Data;
            tasks[tasks.FindIndex(x => x.Id == edited.Id)] = edited;
        }
    }

    private List<TaskModel> tasks;

    protected override void OnInitialized()
    {
        tasks = _db.Tasks_GetAll();
        tasks = tasks.Where(x => x.CompletionFlag == false).ToList();
    }
}
