@page "/CompletedTasks"
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject NavigationManager NavManager
@inject ISqlDataAccess _db

<h3>Completed Tasks</h3>

<button @onclick="OnDeleteAll" class="btn btn-danger">Delete All</button>

<EditForm Model="@searchTag">
    <InputSelect @bind-Value="searchTag.Name">
        <option value=""></option>
        @foreach (TagModel tag in extantTags)
        {
            <option>@tag.Name</option>
        }
    </InputSelect>
    <button type="button" @onclick="SearchTags">Show By Tag</button>

    <InputSelect @bind-Value="sortBy">
        <option value=""></option>
        <option value="Priority">Priority</option>
        <option value="Date Completed">Date Completed</option>
    </InputSelect>
    <button type="button" @onclick="SortTasks">Sort By</button>
</EditForm>

<table class="table container-fluid">
    <thead>
        <tr class="row text-center">
            <th class="col-sm-4">Description</th>
            <th class="col-sm-1">Priority</th>
            <th class="col-sm-1">Date Completed</th>
            <th class="col-sm-3">Subtasks</th>
            <th class="col-sm-2">Tags</th>
            <th class="col-sm-1">Buttons</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in tasks)
        {
            if (t.CompletionFlag && (tagLimiter is null || (t.Tags is not null && t.Tags.Contains(tagLimiter, new TagComparer()))))
            {
                <tr class="row @ColorPicker(t)">
                    <td class="col-sm-4">@t.Description</td>
                    <td class="col-sm-1">@t.Priority</td>
                    <td class="col-sm-1">@t.DateCompleted.ToString("yyyy/MM/dd")</td>
                    <td class="col-sm-3">
                        @if (t.Subtasks is null || t.Subtasks.Count == 0)
                        {
                            <ul>There are no subtasks</ul>
                        }
                        else
                        {
                            foreach (var s in t.Subtasks)
                            {
                                <ul>
                                    <li>
                                        @s.Description
                                    </li>

                                </ul>

                            }
                        }
                    </td>
                    <td class="col-sm-2">
                        @if (t.Tags is null || t.Tags.Count == 0)
                        {
                            <ul>There are no tags</ul>
                        }
                        else
                        {
                            foreach (var tag in t.Tags)
                            {
                                <ul>
                                    <li>@tag.Name</li>
                                </ul>
                            }
                        }
                    </td>
                    <td class="col-sm-1">
                        <div class="btn-group">
                            <button class="btn-danger" @onclick="e=> OnDelete(t.Id)"><i class="fas fa-trash-alt"></i></button>
                            <button class="btn-secondary" @onclick="e=> ShowCopyTask(t)"><i class="fas fa-copy"></i></button>
                        </div>

                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public TagModel searchTag { get; set; } = new TagModel();
    [Parameter] public string sortBy { get; set; }

    private List<TaskModel> tasks;
    private List<TagModel> extantTags;
    private TagModel tagLimiter;

    private void OnDelete(int Id)
    {
        _db.DeleteTask(Id);
        tasks.RemoveAll(x => x.Id == Id);
    }

    private void OnDeleteAll()
    {
        _db.DeleteAllCompleted();
        tasks.Clear();
    }
    async Task ShowCopyTask(TaskModel model)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(CopyTask.copyTask), model);

        var formModal = Modal.Show<CopyTask>("Copy Task", parameters);
        var result = await formModal.Result;
        if (!result.Cancelled)
        {
            NavManager.NavigateTo("/TodoList");
        }

    }

    private void SearchTags()
    {
        int searchTagIndex = extantTags.FindIndex(x => x.Name == searchTag.Name);
        bool tagNullcheck = String.IsNullOrWhiteSpace(searchTag.Name);
        if (!tagNullcheck && searchTagIndex != -1)
        {
            tagLimiter = extantTags[searchTagIndex];
        }
        //Resets tagLimiter to null, returns all displayable tasks.
        if (tagNullcheck)
        {
            tagLimiter = null;
        }
    }

    private void SortTasks()
    {
        if (String.IsNullOrWhiteSpace(sortBy))
        {
            return;
        }
        else if (sortBy == "Priority")
        {
            tasks = tasks.OrderByDescending(x => x.Priority).ThenBy(x => x.DateCompleted.Date).ToList();
        }
        else if (sortBy == "Date Completed")
        {
            tasks = tasks.OrderByDescending(x => x.DateCompleted.Date).ThenBy(x => x.Priority).ToList();
        }
    }

    private string ColorPicker(TaskModel t)
    {
        int dateTimeComp = DateTimeOffset.Compare(t.DueDate.Date, t.DateCompleted.Date);
        if (dateTimeComp >= 0)
        {
            return "successfulTask";
        }
        else
        {
            return "overdueTask";
        }
    }

    protected override void OnInitialized()
    {
        tasks = _db.Tasks_GetAll();
        tasks = tasks.Where(x => x.CompletionFlag).ToList();
        extantTags = _db.Tags_GetAll();
    }
}
