@inject ISqlDataAccess _db

<div>
    <EditForm Model="@newTask" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Description">Task Description</label>
            <InputTextArea class="form-control " id="Description" rows="3" maxlength="300" placeholder="Required Field. Maximum 300 characters." required @bind-Value="newTask.Description"></InputTextArea>
        </div>
        <div class="form-group">
            <label for="Priority">Priority</label>
            <InputSelect class="form-control" id="Priority" @bind-Value="newTask.Priority">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="DueDate">Due Date</label>
            <InputDate id="DueDate" @bind-Value="newTask.DueDate" />
        </div>

        <div class="form-group">
            <label for="Subtasks">Subtasks</label>
            @if (newTask.Subtasks is not null)
            {
                foreach (SubtaskModel st in newTask.Subtasks)
                {
<p>@st.Description</p>}
                }
            <textarea id="Subtasks" @bind="newSubtask" rows="2" placeholder="Maximum 300 characters." maxlength="300"></textarea>
            <button type="button" @onclick="AddSubtask">Add Subtask</button>
        </div>
        <div class="form-group">
            <label for="Tags">Tags</label>
            @if (newTask.Tags is not null)
            {
                foreach (TagModel t in newTask.Tags)
                {
<p>@t.Name</p>}
                }
            <input type="text" id="Tags" @bind="newTag" maxlength="100" placeholder="Maximum 100 characters." />
            <button type="button" @onclick="AddTag">Add Tag</button>

        </div>

        <button type="submit" class="btn btn-primary">Create</button>
        <button @onclick="Cancel" class="btn btn-danger">Cancel</button>
    </EditForm>


</div>

@code { [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private TaskModel newTask = new TaskModel();

    private string newSubtask;
    private void AddSubtask()
    {
        if (newTask.Subtasks is null)
        {
            newTask.Subtasks = new List<SubtaskModel>();
        }
        if (!String.IsNullOrWhiteSpace(newSubtask))
        {
            newTask.Subtasks.Add(new SubtaskModel() { Description = newSubtask });
            newSubtask = string.Empty;
        }
    }

    private string newTag;
    private void AddTag()
    {
        if (newTask.Tags is null)
        {
            newTask.Tags = new List<TagModel>();
        }
        //TODO: Better validation
        if (!String.IsNullOrWhiteSpace(newTag) && newTask.Tags.FindIndex(x => x.Name == newTag) == -1)
        {
            newTask.Tags.Add(new TagModel() { Name = newTag });
            newTag = string.Empty;
        }
        else
        {
            newTag = "invalid entry.";
        }
    }

    private void HandleValidSubmit()
    {

        _db.CreateTask(newTask);
    }



    async Task Cancel() => await BlazoredModal.CancelAsync(); }